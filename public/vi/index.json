[
{
	"uri": "/vi/1-introduction/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan Sơ luợc về giải pháp Tạo bucket trong S3\nTrong bước này, chúng ta sẽ tạo một bucket trong S3. Bên trong sẽ tạo hai thư mục (đúng hơn là prefix) trong S3, một cho ảnh gốc tải lên, và một cho ảnh sau xử lý (Đã thêm watermark) cho việc demo.\nTạo IAM role cho hàm Lambda\nBước này, chúng ta sẽ tạo một IAM role có đủ phân quyền cho hàm Lambda function có khả năng xem, tải ảnh để xử lý và tải lên S3 cũng như các quyền cần thiết để có thể viết logs trong CloudWatch Logs.\nTạo và đóng gói hàm Lambda\nChúng ta sẽ tạo hàm lambda và đóng gói nó vào một tệp .zip bao gồm mã code cho hàm và một thư viện ngoài cần dùng cho việc xử lý ảnh\nKiểm tra hoạt động\nSau khi tạo xong tài nguyên cần thiết, chúng ta sẽ test sự hoạt động của bài workshop.\nDọn dẹp tài nguyên\nDọn dẹp lại tài nguyên trả về trạng thái ban đầu\nHãy bắt đầu với việc đăng nhập vào tài khoản AWS của bạn, tốt nhất là hãy sử dụng một tài khoản IAM với quyền admin. Sau đó chọn region bạn muốn, tôi sẽ chọn us-east-1 (N.Virginia) cho bài workshop này.\n"
},
{
	"uri": "/vi/4-packaginglambda/4.1-createlambda/",
	"title": "Tạo hàm Lambda",
	"tags": [],
	"description": "",
	"content": "Tạo hàm Lambda Trở về giao diện AWS Console: Tìm kiếm từ khóa Lambda và Click chọn để đi đến trang chủ AWS Lambda\nTrong giao diện AWS Lambda: Chọn Create a function\nTrong cửa sổ Create function: Chọn Author from scratch trong mục Method để tạo hàm thủ công\nTrong Basic information, bạn có thể đặt tên hàm Lambda là WatermarkS3Upload\nTrong Runtime, chọn phiên bản Python 3 mà bạn muốn.\nHãy chọn môi trường chạy trong mục này giống với môi trường trong máy tính của bạn để chắc chắn nó sẽ chạy trong Lambda\nMở rộng mục Change default execution role, chọn Use an existing role\nTrong danh sách thả xuống, tìm IAM Role chúng ta đã tạo trong phần trước LambdaWatermarkS3Role\nClick vào Create function để tạo hàm.\nTạo hàm Lambda thành công\nTiếp theo chúng ta sẽ tạo trigger cần thiết để kích hoạt hàm Lambda.\n"
},
{
	"uri": "/vi/3-createiamrole/3.1-createiampolicy/",
	"title": "Tạo IAM Policy",
	"tags": [],
	"description": "",
	"content": "Tạo IAM Policy Trở về trang AWS Console : Tìm kiếm từ khóa IAM và chọn để đi đến trang IAM Trong giao diện quản lý IAM: Trong menu bên phải, tìm và chọn Policies\nSau đó chọn Create Policy\nHãy làm theo các bước sau để tạo một IAM Policy, nó sẽ cho phép một số quyền truy cập CloudWatch Logs và bucket S3 ta đã tạo trước đó: Trong mục Specify Permissions chọn JSON để thêm các quyền bằng JSON.\nBạn cũng có thể sử dụng Visual Editor để tạo policy thủ công bằng cách chọn các nút cần thiết theo hướng dẫn.\nBây giờ hãy sao chép đoạn code JSON vào một Code Editor trên máy của bạn.\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:*\u0026#34;, \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3:::YOUR-BUCKET-NAME\u0026#34;, \u0026#34;arn:aws:s3:::YOUR-BUCKET-NAME/*\u0026#34; ] } ] } Thay thế YOUR-BUCKET-NAME với tên bucket đã tạo và copy tên trước đó.\nChọn Next.\nĐặt tên LambdaWatermarkS3 cho policy mới\nXem lại các quyền đã cấp trước đó rồi chọn Create policy\nHoàn thành việc tạo IAM Policy Trong danh sách policy, tìm theo tên LambdaWatermarkS3 hay chọn lọc theo phân loại Customer managed, bạn sẽ tìm thấy policy mới đã được tạo.\nBây giờ, chúng ta sẽ tiếp tục tạo một IAM Role và gán cho nó policy mới này.\n"
},
{
	"uri": "/vi/",
	"title": "Thêm watermark vào các hình ảnh tải lên Amazon S3 sử dụng AWS Lambda",
	"tags": [],
	"description": "",
	"content": "Thêm watermark vào các hình ảnh tải lên Amazon S3 sử dụng AWS Lambda Overview Việc biến đổi dữ liệu một cách linh hoạt là công việc khá phổ biến ngày nay. Với các ứng dụng và môi trường khác nhau, chúng ta cần khả năng thay đổi dữ liệu phù hợp với các ca sử dụng. Bài workshop này sẽ là một ví dụ cho việc tự động hóa việc thay đổi dữ liệu, đơn giản như việc thêm watermark vào các hình ảnh được tải lên các bucket Amazon S3 sử dụng AWS Lambda. Từ đó sẽ là nền tảng để làm những biến dổi khác trước khi lưu trữ dữ liệu lên S3. Tôi sẽ đi qua từng bước chi tiết từ tạo các tài nguyên cần thiết, test luồng hoạt động và dọn dẹp sau đó. Hãy cùng bắt đầu nào\nContent Giới thiệu\nTạo bucket trong S3\nTạo IAM role cho hàm Lambda\nTạo và đóng gói hàm Lambda\nKiểm tra hoạt động\nDọn dẹp tài nguyên\n"
},
{
	"uri": "/vi/2-creates3bucket/",
	"title": "Tạo bucket S3",
	"tags": [],
	"description": "",
	"content": "Overview Trong phần này, chúng ta sẽ tạo một bucket cho bài workshop, chúng ta sẽ tạo hai prefix source/ và destination/ như là hai thư mục trong bucket.\nPrefix hay thư mục source/ sẽ dùng để lưu các ảnh gốc chưa chỉnh sửa ta tải lên, còn thư mục destination/ sẽ lưu các ảnh được thêm watermark sau khi chạy hàm Lambda.\nTrong các bucket S3 sẽ có cấu trúc phẳng thay vì phân tầng như các hệ thống file. Nhưng để tiện hơn cho việc quản lý, trong console sẽ hỗ trợ các khái niệm thư mục như là cách để nhóm các object cùng loại với nhau bằng cách dùng chung các prefix cho các object đó.\nTạo bucket Trong trang chủ console AWS: Nhập S3 vào thanh tìm kiếm, dịch vụ S3 sẽ nằm trên đó, chọn mục này để vào trang S3.\nTrong console S3 click vào Create Bucket\nTrong trang tạo bucket: Chọn region mà bạn muốn\nĐặt tên cho cái bucket S3, hãy chắc chắn rằng nó thỏa mãn hướng dẫn đặt tên, và tên này phải là duy nhất trên toàn câud. Ở đây tôi sẽ đặt tên cho bucket là lambda-watermark-bucket-_sobatky_\nĐể cho đơn giản, hãy để mặc định các mục khác và kéo xuống chọn Create Bucket\nHãy đợi thông báo thành công màu xanh lá để chắc chắn bucket đã được tạo\nBạn có thể copy mã ARN và tên của bucket vào bảng nhớ tạm để tiện cho các bước tiếp theo.\nTạo các thư mục Trở về S3 trong console Chọn và đi đến bucket ta mới tạo trong danh sách bucket. Bây giờ ta sẽ tạo các \u0026rsquo;thư mục'.\nClick vào Create Folder\nNhập source cho tên thư mục đầu tiên.\nĐể các setting như mặc định, kéo xuống chọn Create Folder\nLàm lại quá trình tạo thư mục và tạo thêm thư mục destination Cấu trúc bucket của bạn bây giờ sẽ trông gần giống như sau:\nTuyệt, ta đã tạo xong tài nguyên bucket S3, hãy đi đến bước tiếp theo!\n"
},
{
	"uri": "/vi/3-createiamrole/3.2-createiamrole/",
	"title": "Tạo IAM Role",
	"tags": [],
	"description": "",
	"content": "Tạo IAM Role Trở về dịch vụ IAM trong Console: Ở menu bên phải, tìm và chọn mục Roles\nSau đó click vào Create Role\nTrong giao diện Create role: Với mục Select trusted entity chọn AWS Service.\nVới mục Use Case chọn Lambda từ danh sách thả xuống.\nGắn IAM Policy vào IAM Role: Trong mục Add Permission lọc các policy trong danh sách như ta đã làm trước đó và chọn LambdaWatermarkS3.\nChọn Next\nĐặt tên và tạo IAM Role Hãy đặt tên role là LambdaWatermarkS3Role\nChọn Create Role\nHoàn thành việc tạo IAM Role\nTuyệt, bây giờ hãy bắt đầu đến với phần tạo hàm Lambda.\n"
},
{
	"uri": "/vi/4-packaginglambda/4.2-createtrigger/",
	"title": "Tạo trigger S3",
	"tags": [],
	"description": "",
	"content": "Tạo một trigger cho hàm Lambda Trong cửa sổ hàm Lamda mới tạo thành công Tìm mục Add Trigger và chọn nó.\nTrong giao diện Add Trigger: Chọn S3 là nguồn trong phần Source\nTiếp theo, trong phần Bucket hiện lên, chọn bucket ta đã tạo trước đó trong danh sách thả xuống.\nMục Event types chọn All object create events\nChúng ta sẽ cài đặt để lắng nghe các sự kiện tạo object trong thư mục prefix source/, hãy điền source/ trong mục Prefix\nChúng ta chủ động tạo hai prefix khác nhau trước đó nên sẽ tránh được việc các hàm Lambda bị gọi lặp đi lặp lại khi chính nó cũng upload object, nhưng giờ đây sẽ tải lên với prefix destination/ .\nKiểm tra lại và chọn Add\nTạo thành công trigger S3 cho hàm Lambda.\nTuyệt vời! Bây giờ ta sẽ viết code cho hàm Lambda và đóng gói chung với thư viện cần thiết và tải lên Lambda.\n"
},
{
	"uri": "/vi/4-packaginglambda/4.3-packagelambda/",
	"title": "Đóng gói hàm Lambda",
	"tags": [],
	"description": "",
	"content": "Viết code cho hàm Lambda Trong máy tính cục bộ của bạn: Tạo một thư mục mới, tôi sẽ đặt tên là workshop1, bạn có thể đặt tên bất kỳ.\nVào trong thư mục và tạo một tệp Python, đặt tên là lambda_function.py chứa code cho hàm Lambda.\nSao chép đoạn code dưới đây và dán vào file lambda_function.py của bạn.\nfrom PIL import Image, ImageDraw, ImageFont import boto3 import os s3 = boto3.client(\u0026#39;s3\u0026#39;) def add_text_watermark(image_path): watermark_text = \u0026#34;SAMPLE\u0026#34; image = Image.open(image_path) draw = ImageDraw.Draw(image) w, h = image.size x, y = int(w / 2), int(h / 2) font = ImageFont.load_default(size=30) draw.text((x, y), watermark_text, fill=(255, 255, 255), font=font, anchor=\u0026#39;ms\u0026#39;) image.save(image_path) image.close() def lambda_handler(event, context): # Extract the bucket name and key from the event bucket = event[\u0026#39;Records\u0026#39;][0][\u0026#39;s3\u0026#39;][\u0026#39;bucket\u0026#39;][\u0026#39;name\u0026#39;] key = event[\u0026#39;Records\u0026#39;][0][\u0026#39;s3\u0026#39;][\u0026#39;object\u0026#39;][\u0026#39;key\u0026#39;] # Define the download path in the Lambda temporary directory and the upload path download_path = \u0026#39;/tmp/\u0026#39; + os.path.basename(key) upload_key = \u0026#39;destination/\u0026#39; + os.path.basename(key) # Save watermarked images in \u0026#39;destination\u0026#39; folder # Download the image from the \u0026#39;source\u0026#39; folder source_key = \u0026#39;source/\u0026#39; + os.path.basename(key) s3.download_file(bucket, source_key, download_path) # Add a watermark to the image add_text_watermark(download_path) # Upload the watermarked image to the \u0026#39;destination\u0026#39; folder s3.upload_file(download_path, bucket, upload_key) # Clean up the temporary file os.remove(download_path) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: \u0026#39;Watermark added successfully!\u0026#39; } Hàm add_text_watermark là một hàm đơn giản sử dụng thư viện PIL để thêm watermark trắng \u0026ldquo;SAMPLE\u0026rdquo; vào giữa ảnh và trả về ảnh mới.\nTổng quan cho đoạn code trên, hàm Lambda sẽ lấy key và tải object xuống môi trường chạy từ event nhận được từ trigger là một object với prefix source/ mỗi khi người dùng thêm tệp vào thư mục này trong bucket S3. Sau đó gọi hàm add_text_watermark để thêm watermark và sau đó upload lại lên thư mục destination/.\nTa sẽ cài đặt PIL bằng pip vào chính thư mục chứa hàm Lambda để hàm có thể gọi thư viện này: Trong terminal của thư mục chứa tệp lambda_function.py, chạy lệnh pip install --target . pillow. Pip sẽ tải các thư viện cần thiết chỉ trong thư mục này, cấu trúc thư mục trông sẽ như sau: Sau đó đóng gói cả thư mục này vào một tệp .zip bằng cách chạy lệnh zip -r ./my_package.zip . trong đó my_package là tên của tệp .zip chứa đầy đủ các tệp sẵn sàng upload để chạy trên Lambda. Hãy chắc chắn rằng trong file .zip phải có cấu trúc phẳng, với code hàm lambda và các thư viện đã tải cùng nằm trong gốc của thư mục.\nSau khi xong việc tạo file .zip, ta quay trở lại giao diện Lambda trong AWS console Nhấp chọn vào hàm Lambda ta tạo trước đó WatermarkS3Upload.\nChọn mục Upload from sau đó chọn .zip file, cửa sổ chọn tệp sẽ hiện lên, tìm kiếm và chọn tệp my_package.zip từ máy của bạn , đợi cho việc tải lên thành công, sau đó hãy đến bước tiếp theo.\n"
},
{
	"uri": "/vi/3-createiamrole/",
	"title": "Tạo IAM role cho hàm Lambda",
	"tags": [],
	"description": "",
	"content": "Trao các quyền cho Lambda Hàm Lambda của chúng ta sẽ cần các quyền để tải xuống, thay đổi, và tải object lên các bucket S3. Cùng với đõ là các quyền dành cho Cloudwatch Logs để có thể viết log theo dõi các lượt thực thi.\nCách tốt nhất để giao các quyền này cho Lambda là sử dụng một IAM Role. Trong phần này, ta sẽ tạo IAM Role cho hàm Lambda sau này các quyền truy cập tài nguyên cần thiết.\nTa sẽ tạo một IAM Policy trước rồi sau đó tạo IAM Role để gán Policy đó vào.\nMục lục Tạo IAM Policy\nTạo IAM Role\n"
},
{
	"uri": "/vi/4-packaginglambda/",
	"title": "Tạo và đóng gói hàm Lambda",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong bước này, chúng ta sẽ bắt đầu tạo và viết code cho hàm Lambda với Python. Để thay đổi các object là ảnh, chúng ta thường sẽ dùng một thư viện chuyên dụng để xử lý ảnh, ta sẽ đóng gói hàm chung với một thư viện bên ngoài PIL, sử dụng hướng dẫn Làm việc với tệp .zip trong hàm Python Lambda.\nHãy chắc chắn rằng bạn có môi trường Python và pip trong máy tính của bạn và note lại phiên bản Python. Tôi sẽ sử dụng python 3.8 trong máy tính Ubuntu.\nVới các hệ điều hành khác nhau có thể có thao tác khác nhau nhưng về lý thuyết thì như nhau trong việc đóng gói. Quá trình demo tôi sẽ sử dụng các lệnh trong Ubuntu.\nContent Tạo hàm Lambda Tạo Trigger S3 Đóng gói và tải lên "
},
{
	"uri": "/vi/5-testing/",
	"title": "Test hoạt động",
	"tags": [],
	"description": "",
	"content": "Test hàm Lambda Trong trang quản lý AWS Lambda có hỗ trợ chạy thử các test với các template, nhưng với quá trình này, việc test khá đơn giản nên ta có thể tự tải tệp lên và kiểm tra kết quả trong các thư mục. Ta sẽ tải thử một sổ tệp vào thư mục prefix source/ và xem kết quả trong destination/\nTôi đã chuẩn bị một vài tệp ảnh .jpg trong máy. Chúng ta có thể tải lên bất kỳ loại file ảnh nào PIL hỗ trợ, hãy nhớ rằng các lỗi thực thi (bao gồm định dạng tệp không hỗ trợ) sẽ đều được ghi lại trong một nhóm CloudWatch Log.\nTrở về AWS Console, tìm S3 và chọn dịch vụ để đi tới. Tìm kiếm và chọn bucket ta đã tạo trong project này\nClick vào thư mục source/.\nChọn Upload\nTrong cửa sổ Upload, chọn Add files\nChọn một hoặc nhiều ảnh bạn muốn và bấm Upload. Đợi quá trình tải tệp mới thành công.\nTrở về trang bucket trước đó. Bạn kiểm tra ảnh bằng cách chọn vào thư mục destination/, sẽ có ảnh tải lên với tên giống với ảnh bạn đã chọn.\nChọn vào ảnh đó và bấm Download, bạn mở ảnh sẽ có ảnh cũ nhưng bây giờ đã có thêm watermark \u0026ldquo;SAMPLE\u0026rdquo; màu trắng ở chính giữa\nẢnh tải lên thư mục source/\nẢnh sau khi hàm Lambda đã chạy, trong thư mục destination/\nKiểm tra log Một điều nữa bạn nên chú ý chính là việc xem lại log các lần thực thi hàm Lambda.\nTrở về AWS Console, tìm CloudWatch và click để đi đến trang dịch vụ CloudWatch. Trong menu bên trái, mở rộng mục Log và chọn Log group Bạn sẽ tìm thấy một nhóm log bắt đầu bởi aws/lambda/ và sau đó là tên hàm Lambda của chúng ta WatermarkS3Upload nếu đã thực hiện thành công. Hãy thử chọn thư mục log mới nhất và xem các log đã được ghi lại.\nLog chạy hàm Lambda\nVậy là bạn đã gần như hoàn thành bài workshop này, bây giờ chúng ta sẽ nên dọn dẹp các tài nguyên, trả tài khoản về trạng thái cũ để tránh các khoản phí không mong muốn.\n"
},
{
	"uri": "/vi/6-cleanup/",
	"title": "Dọn dẹp tài nguyên ",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên Ta sẽ xóa các tài nguyên sau một cách lần lượt:\nXóa hàm Lambda Quay trở về Lambda trong AWS Console.\nChọn hàm Lambda chúng ta đã tạo.\nMở rộng mục Action và chọn Delete.\nXác nhận việc xóa.\nXóa bucket S3 Truy cập S3 trong AWS console.\nChọn bucket ta đã tạo trước đó.\nClick vào Empty\nXác nhận xóa hết object\nTiếp tục trở về giao diện bucket\nBấm Delete\nXác nhận xóa bucket\nDelete the IAM Policy Truy cập trang IAM trong AWS console.\nTrong menu bên trái chọn Policies\nLọc ra Policy chúng ta đã tạo và chọn LambdaWatermarkS3\nClick vào Delele\nXác nhận việc xóa.\nDelete the IAM Role Trở về giao diện IAM trong AWS console.\nTrong menu bên trái chọn Roles\nLọc ra Role chúng ta đã tạo và chọn LambdaWatermarkS3Role\nClick vào Delele\nXác nhận việc xóa,\nBạn đã hoàn thành xong workshop này, cảm ơn vì đã dành thời gian!!!\n"
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]